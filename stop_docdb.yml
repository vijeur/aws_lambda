AWSTemplateFormatVersion: 2010-09-09
Resources:
 LambdaExecutionRole:
   Properties:
     RoleName: stopdocdbLambdaExecutionRole
     AssumeRolePolicyDocument:
       Statement:
       - Action:
         - sts:AssumeRole
         Effect: Allow
         Principal:
           Service: lambda.amazonaws.com
       Version: '2012-10-17'
     ManagedPolicyArns:
     - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
     - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
     - arn:aws:iam::aws:policy/AmazonRDSFullAccess
     - arn:aws:iam::aws:policy/AmazonDocDBFullAccess
   Type: AWS::IAM::Role
 LambdaEC2:
   Type: AWS::Lambda::Function
   Properties: 
     Code:
         ZipFile: |
            import sys
            import botocore
            import boto3
            import os
            from botocore.exceptions import ClientError
            def lambda_handler(event, context):
                dbdoc = boto3.client('docdb')
                DBinstance = os.environ['CLUSTER_ID']
                print 'Stoping RDS service for DBInstance : ' + DBinstance
                   
                try:
                    response = dbdoc.stop_db_cluster(
                        DBClusterIdentifier=DBinstance
                    )
                    print 'Success :: ' 
                    return response
                except ClientError as e:
                    print(e)    
                return
                {
                   'message' : "Script execution completed. See Cloudwatch logs for complete output"
                 }

     Description: Ec2 Instances Uptime Monitoring
     FunctionName: docdb-instance-stop
     Handler: index.lambda_handler
     Environment:
      Variables:
       CLUSTER_ID: !Sub '{{resolve:secretsmanager:secret-docdb-${AWS::Region}:SecretString:clusterID}}'
     Role: 
       Fn::GetAtt: LambdaExecutionRole.Arn
     Runtime: python2.7
     Timeout: 90
 EC2MonitoringLambdaEvent:
   Type: AWS::Events::Rule
   Properties: 
     Description: Docdb stop Lambda Event Rule
     ScheduleExpression: "rate(7 days)"
     State: "ENABLED"
     Targets: 
     - 
       Arn: 
         Fn::GetAtt: 
           - "LambdaEC2"
           - "Arn"
       Id: "TargetFunctionV1"
 PermissionForEventsToInvokeLambda: 
   Type: AWS::Lambda::Permission
   Properties: 
     FunctionName: 
       Ref: "LambdaEC2"
     Action: "lambda:InvokeFunction"
     Principal: "events.amazonaws.com"
     SourceArn: 
       Fn::GetAtt: 
         - "EC2MonitoringLambdaEvent"
         - "Arn"
