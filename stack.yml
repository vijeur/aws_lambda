---
Parameters:
  PrefixParam:
    Type: String
    Description: Value that will be prefixed for resource names
    AllowedPattern: "^[a-zA-Z0-9]*$"
    ConstraintDescription: Must be a valid string containing numbers or letters without spaces.
    Default: prefix

  IAMRoleName:
    Description: IAM Role Name that Lambda functions will be assuming
    Type: String
    Default: website-monitoring-LambdaExecutionRole

  IAMRolePolicyName01:
    Description: IAM Role Name that Lambda functions will be assuming
    Type: String
    Default: website-monitoring-LambdaExecution-policy01

  IAMRolePolicyName02:
    Description: IAM Role Name that Lambda functions will be assuming
    Type: String
    Default: website-monitoring-LambdaExecution-policy02

  NotificationEmailAddress:
    Type: String
    Default: 'vijechopa@gmail.com'
    Description: Enter the email to get the update.

Resources:
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref IAMRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Ref IAMRolePolicyName01
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: !Ref IAMRolePolicyName02
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: 'arn:aws:logs:*:*:*'
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: website-monitoring--Topic
      TopicName: website-monitoring--Topic
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmailAddress

  websitemonitorLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          from botocore.vendored import requests
          import boto3

          websiteURL = 'https://www.google.com'
          topicArnCode = arn:aws:sns:AWS_REGION:

          def lambda_handler(event, context):
              r = requests.head(websiteURL)
              if r.status_code == 200:
                  print "Website Is Alive!"
              else:
                  sns = boto3.client('sns')
                  sns.publish(
                      TopicArn = topicArnCode,
                      Subject = 'Website Offline' ,
                      Message = 'Status code 200 was expected but returned was '+ str(r.status_code)
                  )

      Description: Lambda Function that will trigger sns
      FunctionName: websitemonitorLambda
      Handler: index.handler
      MemorySize: '128'
      Role: !GetAtt RootRole.Arn
      Runtime: python2.7
      Timeout: '3'

  websiteScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "websitemonitorLambda"
              - "Arn"
          Id: "websitemonitor"

